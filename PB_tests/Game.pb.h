// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Game_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Game_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Game_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Game_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Game_2eproto;
namespace me {
namespace eax {
namespace examples {
namespace game {
class Hero;
struct HeroDefaultTypeInternal;
extern HeroDefaultTypeInternal _Hero_default_instance_;
class MageInfo;
struct MageInfoDefaultTypeInternal;
extern MageInfoDefaultTypeInternal _MageInfo_default_instance_;
class WarriorInfo;
struct WarriorInfoDefaultTypeInternal;
extern WarriorInfoDefaultTypeInternal _WarriorInfo_default_instance_;
}  // namespace game
}  // namespace examples
}  // namespace eax
}  // namespace me
PROTOBUF_NAMESPACE_OPEN
template<> ::me::eax::examples::game::Hero* Arena::CreateMaybeMessage<::me::eax::examples::game::Hero>(Arena*);
template<> ::me::eax::examples::game::MageInfo* Arena::CreateMaybeMessage<::me::eax::examples::game::MageInfo>(Arena*);
template<> ::me::eax::examples::game::WarriorInfo* Arena::CreateMaybeMessage<::me::eax::examples::game::WarriorInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace me {
namespace eax {
namespace examples {
namespace game {

enum Spell : int {
  FIREBALL = 0,
  THUNDERBOLT = 1,
  Spell_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Spell_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Spell_IsValid(int value);
constexpr Spell Spell_MIN = FIREBALL;
constexpr Spell Spell_MAX = THUNDERBOLT;
constexpr int Spell_ARRAYSIZE = Spell_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Spell_descriptor();
template<typename T>
inline const std::string& Spell_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Spell>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Spell_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Spell_descriptor(), enum_t_value);
}
inline bool Spell_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Spell* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Spell>(
    Spell_descriptor(), name, value);
}
enum Weapon : int {
  SWORD = 0,
  BOW = 1,
  Weapon_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Weapon_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Weapon_IsValid(int value);
constexpr Weapon Weapon_MIN = SWORD;
constexpr Weapon Weapon_MAX = BOW;
constexpr int Weapon_ARRAYSIZE = Weapon_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Weapon_descriptor();
template<typename T>
inline const std::string& Weapon_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Weapon>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Weapon_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Weapon_descriptor(), enum_t_value);
}
inline bool Weapon_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Weapon* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Weapon>(
    Weapon_descriptor(), name, value);
}
// ===================================================================

class WarriorInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:me.eax.examples.game.WarriorInfo) */ {
 public:
  inline WarriorInfo() : WarriorInfo(nullptr) {}
  ~WarriorInfo() override;
  explicit constexpr WarriorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WarriorInfo(const WarriorInfo& from);
  WarriorInfo(WarriorInfo&& from) noexcept
    : WarriorInfo() {
    *this = ::std::move(from);
  }

  inline WarriorInfo& operator=(const WarriorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WarriorInfo& operator=(WarriorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WarriorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const WarriorInfo* internal_default_instance() {
    return reinterpret_cast<const WarriorInfo*>(
               &_WarriorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WarriorInfo& a, WarriorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WarriorInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WarriorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WarriorInfo* New() const final {
    return new WarriorInfo();
  }

  WarriorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WarriorInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WarriorInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WarriorInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WarriorInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "me.eax.examples.game.WarriorInfo";
  }
  protected:
  explicit WarriorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrowsNumberFieldNumber = 2,
    kWeaponFieldNumber = 1,
  };
  // int64 arrows_number = 2;
  void clear_arrows_number();
  ::PROTOBUF_NAMESPACE_ID::int64 arrows_number() const;
  void set_arrows_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_arrows_number() const;
  void _internal_set_arrows_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .me.eax.examples.game.Weapon weapon = 1;
  void clear_weapon();
  ::me::eax::examples::game::Weapon weapon() const;
  void set_weapon(::me::eax::examples::game::Weapon value);
  private:
  ::me::eax::examples::game::Weapon _internal_weapon() const;
  void _internal_set_weapon(::me::eax::examples::game::Weapon value);
  public:

  // @@protoc_insertion_point(class_scope:me.eax.examples.game.WarriorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 arrows_number_;
  int weapon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MageInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:me.eax.examples.game.MageInfo) */ {
 public:
  inline MageInfo() : MageInfo(nullptr) {}
  ~MageInfo() override;
  explicit constexpr MageInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MageInfo(const MageInfo& from);
  MageInfo(MageInfo&& from) noexcept
    : MageInfo() {
    *this = ::std::move(from);
  }

  inline MageInfo& operator=(const MageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MageInfo& operator=(MageInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MageInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MageInfo* internal_default_instance() {
    return reinterpret_cast<const MageInfo*>(
               &_MageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MageInfo& a, MageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MageInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MageInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MageInfo* New() const final {
    return new MageInfo();
  }

  MageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MageInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MageInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MageInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MageInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "me.eax.examples.game.MageInfo";
  }
  protected:
  explicit MageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpellbookFieldNumber = 1,
    kManaFieldNumber = 2,
  };
  // repeated .me.eax.examples.game.Spell spellbook = 1;
  int spellbook_size() const;
  private:
  int _internal_spellbook_size() const;
  public:
  void clear_spellbook();
  private:
  ::me::eax::examples::game::Spell _internal_spellbook(int index) const;
  void _internal_add_spellbook(::me::eax::examples::game::Spell value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_spellbook();
  public:
  ::me::eax::examples::game::Spell spellbook(int index) const;
  void set_spellbook(int index, ::me::eax::examples::game::Spell value);
  void add_spellbook(::me::eax::examples::game::Spell value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& spellbook() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_spellbook();

  // int64 mana = 2;
  void clear_mana();
  ::PROTOBUF_NAMESPACE_ID::int64 mana() const;
  void set_mana(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mana() const;
  void _internal_set_mana(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:me.eax.examples.game.MageInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> spellbook_;
  mutable std::atomic<int> _spellbook_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mana_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class Hero final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:me.eax.examples.game.Hero) */ {
 public:
  inline Hero() : Hero(nullptr) {}
  ~Hero() override;
  explicit constexpr Hero(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Hero(const Hero& from);
  Hero(Hero&& from) noexcept
    : Hero() {
    *this = ::std::move(from);
  }

  inline Hero& operator=(const Hero& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hero& operator=(Hero&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Hero& default_instance() {
    return *internal_default_instance();
  }
  enum ClassSpecificInfoCase {
    kWarriorInfo = 4,
    kMageInfo = 5,
    CLASS_SPECIFIC_INFO_NOT_SET = 0,
  };

  static inline const Hero* internal_default_instance() {
    return reinterpret_cast<const Hero*>(
               &_Hero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Hero& a, Hero& b) {
    a.Swap(&b);
  }
  inline void Swap(Hero* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Hero* New() const final {
    return new Hero();
  }

  Hero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Hero>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Hero& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Hero& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hero* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "me.eax.examples.game.Hero";
  }
  protected:
  explicit Hero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kHpFieldNumber = 2,
    kXpFieldNumber = 3,
    kWarriorInfoFieldNumber = 4,
    kMageInfoFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 hp = 2;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int64 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 xp = 3;
  void clear_xp();
  ::PROTOBUF_NAMESPACE_ID::int64 xp() const;
  void set_xp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_xp() const;
  void _internal_set_xp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .me.eax.examples.game.WarriorInfo warrior_info = 4;
  bool has_warrior_info() const;
  private:
  bool _internal_has_warrior_info() const;
  public:
  void clear_warrior_info();
  const ::me::eax::examples::game::WarriorInfo& warrior_info() const;
  PROTOBUF_MUST_USE_RESULT ::me::eax::examples::game::WarriorInfo* release_warrior_info();
  ::me::eax::examples::game::WarriorInfo* mutable_warrior_info();
  void set_allocated_warrior_info(::me::eax::examples::game::WarriorInfo* warrior_info);
  private:
  const ::me::eax::examples::game::WarriorInfo& _internal_warrior_info() const;
  ::me::eax::examples::game::WarriorInfo* _internal_mutable_warrior_info();
  public:
  void unsafe_arena_set_allocated_warrior_info(
      ::me::eax::examples::game::WarriorInfo* warrior_info);
  ::me::eax::examples::game::WarriorInfo* unsafe_arena_release_warrior_info();

  // .me.eax.examples.game.MageInfo mage_info = 5;
  bool has_mage_info() const;
  private:
  bool _internal_has_mage_info() const;
  public:
  void clear_mage_info();
  const ::me::eax::examples::game::MageInfo& mage_info() const;
  PROTOBUF_MUST_USE_RESULT ::me::eax::examples::game::MageInfo* release_mage_info();
  ::me::eax::examples::game::MageInfo* mutable_mage_info();
  void set_allocated_mage_info(::me::eax::examples::game::MageInfo* mage_info);
  private:
  const ::me::eax::examples::game::MageInfo& _internal_mage_info() const;
  ::me::eax::examples::game::MageInfo* _internal_mutable_mage_info();
  public:
  void unsafe_arena_set_allocated_mage_info(
      ::me::eax::examples::game::MageInfo* mage_info);
  ::me::eax::examples::game::MageInfo* unsafe_arena_release_mage_info();

  void clear_class_specific_info();
  ClassSpecificInfoCase class_specific_info_case() const;
  // @@protoc_insertion_point(class_scope:me.eax.examples.game.Hero)
 private:
  class _Internal;
  void set_has_warrior_info();
  void set_has_mage_info();

  inline bool has_class_specific_info() const;
  inline void clear_has_class_specific_info();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 hp_;
  ::PROTOBUF_NAMESPACE_ID::int64 xp_;
  union ClassSpecificInfoUnion {
    constexpr ClassSpecificInfoUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::me::eax::examples::game::WarriorInfo* warrior_info_;
    ::me::eax::examples::game::MageInfo* mage_info_;
  } class_specific_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Game_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WarriorInfo

// .me.eax.examples.game.Weapon weapon = 1;
inline void WarriorInfo::clear_weapon() {
  weapon_ = 0;
}
inline ::me::eax::examples::game::Weapon WarriorInfo::_internal_weapon() const {
  return static_cast< ::me::eax::examples::game::Weapon >(weapon_);
}
inline ::me::eax::examples::game::Weapon WarriorInfo::weapon() const {
  // @@protoc_insertion_point(field_get:me.eax.examples.game.WarriorInfo.weapon)
  return _internal_weapon();
}
inline void WarriorInfo::_internal_set_weapon(::me::eax::examples::game::Weapon value) {
  
  weapon_ = value;
}
inline void WarriorInfo::set_weapon(::me::eax::examples::game::Weapon value) {
  _internal_set_weapon(value);
  // @@protoc_insertion_point(field_set:me.eax.examples.game.WarriorInfo.weapon)
}

// int64 arrows_number = 2;
inline void WarriorInfo::clear_arrows_number() {
  arrows_number_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WarriorInfo::_internal_arrows_number() const {
  return arrows_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WarriorInfo::arrows_number() const {
  // @@protoc_insertion_point(field_get:me.eax.examples.game.WarriorInfo.arrows_number)
  return _internal_arrows_number();
}
inline void WarriorInfo::_internal_set_arrows_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  arrows_number_ = value;
}
inline void WarriorInfo::set_arrows_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_arrows_number(value);
  // @@protoc_insertion_point(field_set:me.eax.examples.game.WarriorInfo.arrows_number)
}

// -------------------------------------------------------------------

// MageInfo

// repeated .me.eax.examples.game.Spell spellbook = 1;
inline int MageInfo::_internal_spellbook_size() const {
  return spellbook_.size();
}
inline int MageInfo::spellbook_size() const {
  return _internal_spellbook_size();
}
inline void MageInfo::clear_spellbook() {
  spellbook_.Clear();
}
inline ::me::eax::examples::game::Spell MageInfo::_internal_spellbook(int index) const {
  return static_cast< ::me::eax::examples::game::Spell >(spellbook_.Get(index));
}
inline ::me::eax::examples::game::Spell MageInfo::spellbook(int index) const {
  // @@protoc_insertion_point(field_get:me.eax.examples.game.MageInfo.spellbook)
  return _internal_spellbook(index);
}
inline void MageInfo::set_spellbook(int index, ::me::eax::examples::game::Spell value) {
  spellbook_.Set(index, value);
  // @@protoc_insertion_point(field_set:me.eax.examples.game.MageInfo.spellbook)
}
inline void MageInfo::_internal_add_spellbook(::me::eax::examples::game::Spell value) {
  spellbook_.Add(value);
}
inline void MageInfo::add_spellbook(::me::eax::examples::game::Spell value) {
  _internal_add_spellbook(value);
  // @@protoc_insertion_point(field_add:me.eax.examples.game.MageInfo.spellbook)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
MageInfo::spellbook() const {
  // @@protoc_insertion_point(field_list:me.eax.examples.game.MageInfo.spellbook)
  return spellbook_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
MageInfo::_internal_mutable_spellbook() {
  return &spellbook_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
MageInfo::mutable_spellbook() {
  // @@protoc_insertion_point(field_mutable_list:me.eax.examples.game.MageInfo.spellbook)
  return _internal_mutable_spellbook();
}

// int64 mana = 2;
inline void MageInfo::clear_mana() {
  mana_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MageInfo::_internal_mana() const {
  return mana_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MageInfo::mana() const {
  // @@protoc_insertion_point(field_get:me.eax.examples.game.MageInfo.mana)
  return _internal_mana();
}
inline void MageInfo::_internal_set_mana(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  mana_ = value;
}
inline void MageInfo::set_mana(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mana(value);
  // @@protoc_insertion_point(field_set:me.eax.examples.game.MageInfo.mana)
}

// -------------------------------------------------------------------

// Hero

// string name = 1;
inline void Hero::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Hero::name() const {
  // @@protoc_insertion_point(field_get:me.eax.examples.game.Hero.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Hero::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:me.eax.examples.game.Hero.name)
}
inline std::string* Hero::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:me.eax.examples.game.Hero.name)
  return _s;
}
inline const std::string& Hero::_internal_name() const {
  return name_.Get();
}
inline void Hero::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Hero::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Hero::release_name() {
  // @@protoc_insertion_point(field_release:me.eax.examples.game.Hero.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Hero::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:me.eax.examples.game.Hero.name)
}

// int64 hp = 2;
inline void Hero::clear_hp() {
  hp_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Hero::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Hero::hp() const {
  // @@protoc_insertion_point(field_get:me.eax.examples.game.Hero.hp)
  return _internal_hp();
}
inline void Hero::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  hp_ = value;
}
inline void Hero::set_hp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:me.eax.examples.game.Hero.hp)
}

// int64 xp = 3;
inline void Hero::clear_xp() {
  xp_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Hero::_internal_xp() const {
  return xp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Hero::xp() const {
  // @@protoc_insertion_point(field_get:me.eax.examples.game.Hero.xp)
  return _internal_xp();
}
inline void Hero::_internal_set_xp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  xp_ = value;
}
inline void Hero::set_xp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_xp(value);
  // @@protoc_insertion_point(field_set:me.eax.examples.game.Hero.xp)
}

// .me.eax.examples.game.WarriorInfo warrior_info = 4;
inline bool Hero::_internal_has_warrior_info() const {
  return class_specific_info_case() == kWarriorInfo;
}
inline bool Hero::has_warrior_info() const {
  return _internal_has_warrior_info();
}
inline void Hero::set_has_warrior_info() {
  _oneof_case_[0] = kWarriorInfo;
}
inline void Hero::clear_warrior_info() {
  if (_internal_has_warrior_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete class_specific_info_.warrior_info_;
    }
    clear_has_class_specific_info();
  }
}
inline ::me::eax::examples::game::WarriorInfo* Hero::release_warrior_info() {
  // @@protoc_insertion_point(field_release:me.eax.examples.game.Hero.warrior_info)
  if (_internal_has_warrior_info()) {
    clear_has_class_specific_info();
      ::me::eax::examples::game::WarriorInfo* temp = class_specific_info_.warrior_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    class_specific_info_.warrior_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::me::eax::examples::game::WarriorInfo& Hero::_internal_warrior_info() const {
  return _internal_has_warrior_info()
      ? *class_specific_info_.warrior_info_
      : reinterpret_cast< ::me::eax::examples::game::WarriorInfo&>(::me::eax::examples::game::_WarriorInfo_default_instance_);
}
inline const ::me::eax::examples::game::WarriorInfo& Hero::warrior_info() const {
  // @@protoc_insertion_point(field_get:me.eax.examples.game.Hero.warrior_info)
  return _internal_warrior_info();
}
inline ::me::eax::examples::game::WarriorInfo* Hero::unsafe_arena_release_warrior_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:me.eax.examples.game.Hero.warrior_info)
  if (_internal_has_warrior_info()) {
    clear_has_class_specific_info();
    ::me::eax::examples::game::WarriorInfo* temp = class_specific_info_.warrior_info_;
    class_specific_info_.warrior_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Hero::unsafe_arena_set_allocated_warrior_info(::me::eax::examples::game::WarriorInfo* warrior_info) {
  clear_class_specific_info();
  if (warrior_info) {
    set_has_warrior_info();
    class_specific_info_.warrior_info_ = warrior_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:me.eax.examples.game.Hero.warrior_info)
}
inline ::me::eax::examples::game::WarriorInfo* Hero::_internal_mutable_warrior_info() {
  if (!_internal_has_warrior_info()) {
    clear_class_specific_info();
    set_has_warrior_info();
    class_specific_info_.warrior_info_ = CreateMaybeMessage< ::me::eax::examples::game::WarriorInfo >(GetArenaForAllocation());
  }
  return class_specific_info_.warrior_info_;
}
inline ::me::eax::examples::game::WarriorInfo* Hero::mutable_warrior_info() {
  ::me::eax::examples::game::WarriorInfo* _msg = _internal_mutable_warrior_info();
  // @@protoc_insertion_point(field_mutable:me.eax.examples.game.Hero.warrior_info)
  return _msg;
}

// .me.eax.examples.game.MageInfo mage_info = 5;
inline bool Hero::_internal_has_mage_info() const {
  return class_specific_info_case() == kMageInfo;
}
inline bool Hero::has_mage_info() const {
  return _internal_has_mage_info();
}
inline void Hero::set_has_mage_info() {
  _oneof_case_[0] = kMageInfo;
}
inline void Hero::clear_mage_info() {
  if (_internal_has_mage_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete class_specific_info_.mage_info_;
    }
    clear_has_class_specific_info();
  }
}
inline ::me::eax::examples::game::MageInfo* Hero::release_mage_info() {
  // @@protoc_insertion_point(field_release:me.eax.examples.game.Hero.mage_info)
  if (_internal_has_mage_info()) {
    clear_has_class_specific_info();
      ::me::eax::examples::game::MageInfo* temp = class_specific_info_.mage_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    class_specific_info_.mage_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::me::eax::examples::game::MageInfo& Hero::_internal_mage_info() const {
  return _internal_has_mage_info()
      ? *class_specific_info_.mage_info_
      : reinterpret_cast< ::me::eax::examples::game::MageInfo&>(::me::eax::examples::game::_MageInfo_default_instance_);
}
inline const ::me::eax::examples::game::MageInfo& Hero::mage_info() const {
  // @@protoc_insertion_point(field_get:me.eax.examples.game.Hero.mage_info)
  return _internal_mage_info();
}
inline ::me::eax::examples::game::MageInfo* Hero::unsafe_arena_release_mage_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:me.eax.examples.game.Hero.mage_info)
  if (_internal_has_mage_info()) {
    clear_has_class_specific_info();
    ::me::eax::examples::game::MageInfo* temp = class_specific_info_.mage_info_;
    class_specific_info_.mage_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Hero::unsafe_arena_set_allocated_mage_info(::me::eax::examples::game::MageInfo* mage_info) {
  clear_class_specific_info();
  if (mage_info) {
    set_has_mage_info();
    class_specific_info_.mage_info_ = mage_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:me.eax.examples.game.Hero.mage_info)
}
inline ::me::eax::examples::game::MageInfo* Hero::_internal_mutable_mage_info() {
  if (!_internal_has_mage_info()) {
    clear_class_specific_info();
    set_has_mage_info();
    class_specific_info_.mage_info_ = CreateMaybeMessage< ::me::eax::examples::game::MageInfo >(GetArenaForAllocation());
  }
  return class_specific_info_.mage_info_;
}
inline ::me::eax::examples::game::MageInfo* Hero::mutable_mage_info() {
  ::me::eax::examples::game::MageInfo* _msg = _internal_mutable_mage_info();
  // @@protoc_insertion_point(field_mutable:me.eax.examples.game.Hero.mage_info)
  return _msg;
}

inline bool Hero::has_class_specific_info() const {
  return class_specific_info_case() != CLASS_SPECIFIC_INFO_NOT_SET;
}
inline void Hero::clear_has_class_specific_info() {
  _oneof_case_[0] = CLASS_SPECIFIC_INFO_NOT_SET;
}
inline Hero::ClassSpecificInfoCase Hero::class_specific_info_case() const {
  return Hero::ClassSpecificInfoCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game
}  // namespace examples
}  // namespace eax
}  // namespace me

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::me::eax::examples::game::Spell> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::me::eax::examples::game::Spell>() {
  return ::me::eax::examples::game::Spell_descriptor();
}
template <> struct is_proto_enum< ::me::eax::examples::game::Weapon> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::me::eax::examples::game::Weapon>() {
  return ::me::eax::examples::game::Weapon_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Game_2eproto
