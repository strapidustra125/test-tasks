// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game.proto

#include "Game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace me {
namespace eax {
namespace examples {
namespace game {
constexpr WarriorInfo::WarriorInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arrows_number_(int64_t{0})
  , weapon_(0)
{}
struct WarriorInfoDefaultTypeInternal {
  constexpr WarriorInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WarriorInfoDefaultTypeInternal() {}
  union {
    WarriorInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WarriorInfoDefaultTypeInternal _WarriorInfo_default_instance_;
constexpr MageInfo::MageInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spellbook_()
  , _spellbook_cached_byte_size_(0)
  , mana_(int64_t{0}){}
struct MageInfoDefaultTypeInternal {
  constexpr MageInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MageInfoDefaultTypeInternal() {}
  union {
    MageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MageInfoDefaultTypeInternal _MageInfo_default_instance_;
constexpr Hero::Hero(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hp_(int64_t{0})
  , xp_(int64_t{0})
  , _oneof_case_{}{}
struct HeroDefaultTypeInternal {
  constexpr HeroDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeroDefaultTypeInternal() {}
  union {
    Hero _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeroDefaultTypeInternal _Hero_default_instance_;
}  // namespace game
}  // namespace examples
}  // namespace eax
}  // namespace me
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Game_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Game_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Game_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Game_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::me::eax::examples::game::WarriorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::me::eax::examples::game::WarriorInfo, weapon_),
  PROTOBUF_FIELD_OFFSET(::me::eax::examples::game::WarriorInfo, arrows_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::me::eax::examples::game::MageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::me::eax::examples::game::MageInfo, spellbook_),
  PROTOBUF_FIELD_OFFSET(::me::eax::examples::game::MageInfo, mana_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::me::eax::examples::game::Hero, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::me::eax::examples::game::Hero, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::me::eax::examples::game::Hero, name_),
  PROTOBUF_FIELD_OFFSET(::me::eax::examples::game::Hero, hp_),
  PROTOBUF_FIELD_OFFSET(::me::eax::examples::game::Hero, xp_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::me::eax::examples::game::Hero, class_specific_info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::me::eax::examples::game::WarriorInfo)},
  { 7, -1, sizeof(::me::eax::examples::game::MageInfo)},
  { 14, -1, sizeof(::me::eax::examples::game::Hero)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::me::eax::examples::game::_WarriorInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::me::eax::examples::game::_MageInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::me::eax::examples::game::_Hero_default_instance_),
};

const char descriptor_table_protodef_Game_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nGame.proto\022\024me.eax.examples.game\"R\n\013Wa"
  "rriorInfo\022,\n\006weapon\030\001 \001(\0162\034.me.eax.examp"
  "les.game.Weapon\022\025\n\rarrows_number\030\002 \001(\003\"H"
  "\n\010MageInfo\022.\n\tspellbook\030\001 \003(\0162\033.me.eax.e"
  "xamples.game.Spell\022\014\n\004mana\030\002 \001(\003\"\263\001\n\004Her"
  "o\022\014\n\004name\030\001 \001(\t\022\n\n\002hp\030\002 \001(\003\022\n\n\002xp\030\003 \001(\003\022"
  "9\n\014warrior_info\030\004 \001(\0132!.me.eax.examples."
  "game.WarriorInfoH\000\0223\n\tmage_info\030\005 \001(\0132\036."
  "me.eax.examples.game.MageInfoH\000B\025\n\023class"
  "_specific_info*&\n\005Spell\022\014\n\010FIREBALL\020\000\022\017\n"
  "\013THUNDERBOLT\020\001*\034\n\006Weapon\022\t\n\005SWORD\020\000\022\007\n\003B"
  "OW\020\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Game_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Game_2eproto = {
  false, false, 452, descriptor_table_protodef_Game_2eproto, "Game.proto", 
  &descriptor_table_Game_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_Game_2eproto::offsets,
  file_level_metadata_Game_2eproto, file_level_enum_descriptors_Game_2eproto, file_level_service_descriptors_Game_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Game_2eproto_getter() {
  return &descriptor_table_Game_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Game_2eproto(&descriptor_table_Game_2eproto);
namespace me {
namespace eax {
namespace examples {
namespace game {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Spell_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Game_2eproto);
  return file_level_enum_descriptors_Game_2eproto[0];
}
bool Spell_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Weapon_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Game_2eproto);
  return file_level_enum_descriptors_Game_2eproto[1];
}
bool Weapon_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class WarriorInfo::_Internal {
 public:
};

WarriorInfo::WarriorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:me.eax.examples.game.WarriorInfo)
}
WarriorInfo::WarriorInfo(const WarriorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&arrows_number_, &from.arrows_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&weapon_) -
    reinterpret_cast<char*>(&arrows_number_)) + sizeof(weapon_));
  // @@protoc_insertion_point(copy_constructor:me.eax.examples.game.WarriorInfo)
}

inline void WarriorInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&arrows_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weapon_) -
    reinterpret_cast<char*>(&arrows_number_)) + sizeof(weapon_));
}

WarriorInfo::~WarriorInfo() {
  // @@protoc_insertion_point(destructor:me.eax.examples.game.WarriorInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WarriorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WarriorInfo::ArenaDtor(void* object) {
  WarriorInfo* _this = reinterpret_cast< WarriorInfo* >(object);
  (void)_this;
}
void WarriorInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WarriorInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WarriorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:me.eax.examples.game.WarriorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&arrows_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weapon_) -
      reinterpret_cast<char*>(&arrows_number_)) + sizeof(weapon_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WarriorInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .me.eax.examples.game.Weapon weapon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_weapon(static_cast<::me::eax::examples::game::Weapon>(val));
        } else goto handle_unusual;
        continue;
      // int64 arrows_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          arrows_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WarriorInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:me.eax.examples.game.WarriorInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .me.eax.examples.game.Weapon weapon = 1;
  if (this->_internal_weapon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_weapon(), target);
  }

  // int64 arrows_number = 2;
  if (this->_internal_arrows_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_arrows_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:me.eax.examples.game.WarriorInfo)
  return target;
}

size_t WarriorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:me.eax.examples.game.WarriorInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 arrows_number = 2;
  if (this->_internal_arrows_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_arrows_number());
  }

  // .me.eax.examples.game.Weapon weapon = 1;
  if (this->_internal_weapon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_weapon());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WarriorInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WarriorInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WarriorInfo::GetClassData() const { return &_class_data_; }

void WarriorInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WarriorInfo *>(to)->MergeFrom(
      static_cast<const WarriorInfo &>(from));
}


void WarriorInfo::MergeFrom(const WarriorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:me.eax.examples.game.WarriorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_arrows_number() != 0) {
    _internal_set_arrows_number(from._internal_arrows_number());
  }
  if (from._internal_weapon() != 0) {
    _internal_set_weapon(from._internal_weapon());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WarriorInfo::CopyFrom(const WarriorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:me.eax.examples.game.WarriorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarriorInfo::IsInitialized() const {
  return true;
}

void WarriorInfo::InternalSwap(WarriorInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WarriorInfo, weapon_)
      + sizeof(WarriorInfo::weapon_)
      - PROTOBUF_FIELD_OFFSET(WarriorInfo, arrows_number_)>(
          reinterpret_cast<char*>(&arrows_number_),
          reinterpret_cast<char*>(&other->arrows_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WarriorInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Game_2eproto_getter, &descriptor_table_Game_2eproto_once,
      file_level_metadata_Game_2eproto[0]);
}

// ===================================================================

class MageInfo::_Internal {
 public:
};

MageInfo::MageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  spellbook_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:me.eax.examples.game.MageInfo)
}
MageInfo::MageInfo(const MageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      spellbook_(from.spellbook_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mana_ = from.mana_;
  // @@protoc_insertion_point(copy_constructor:me.eax.examples.game.MageInfo)
}

inline void MageInfo::SharedCtor() {
mana_ = int64_t{0};
}

MageInfo::~MageInfo() {
  // @@protoc_insertion_point(destructor:me.eax.examples.game.MageInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MageInfo::ArenaDtor(void* object) {
  MageInfo* _this = reinterpret_cast< MageInfo* >(object);
  (void)_this;
}
void MageInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:me.eax.examples.game.MageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spellbook_.Clear();
  mana_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .me.eax.examples.game.Spell spellbook = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_spellbook(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_spellbook(static_cast<::me::eax::examples::game::Spell>(val));
        } else goto handle_unusual;
        continue;
      // int64 mana = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mana_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MageInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:me.eax.examples.game.MageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .me.eax.examples.game.Spell spellbook = 1;
  {
    int byte_size = _spellbook_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, spellbook_, byte_size, target);
    }
  }

  // int64 mana = 2;
  if (this->_internal_mana() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_mana(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:me.eax.examples.game.MageInfo)
  return target;
}

size_t MageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:me.eax.examples.game.MageInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .me.eax.examples.game.Spell spellbook = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_spellbook_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_spellbook(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _spellbook_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 mana = 2;
  if (this->_internal_mana() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mana());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MageInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MageInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MageInfo::GetClassData() const { return &_class_data_; }

void MageInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MageInfo *>(to)->MergeFrom(
      static_cast<const MageInfo &>(from));
}


void MageInfo::MergeFrom(const MageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:me.eax.examples.game.MageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spellbook_.MergeFrom(from.spellbook_);
  if (from._internal_mana() != 0) {
    _internal_set_mana(from._internal_mana());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MageInfo::CopyFrom(const MageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:me.eax.examples.game.MageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MageInfo::IsInitialized() const {
  return true;
}

void MageInfo::InternalSwap(MageInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  spellbook_.InternalSwap(&other->spellbook_);
  swap(mana_, other->mana_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MageInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Game_2eproto_getter, &descriptor_table_Game_2eproto_once,
      file_level_metadata_Game_2eproto[1]);
}

// ===================================================================

class Hero::_Internal {
 public:
  static const ::me::eax::examples::game::WarriorInfo& warrior_info(const Hero* msg);
  static const ::me::eax::examples::game::MageInfo& mage_info(const Hero* msg);
};

const ::me::eax::examples::game::WarriorInfo&
Hero::_Internal::warrior_info(const Hero* msg) {
  return *msg->class_specific_info_.warrior_info_;
}
const ::me::eax::examples::game::MageInfo&
Hero::_Internal::mage_info(const Hero* msg) {
  return *msg->class_specific_info_.mage_info_;
}
void Hero::set_allocated_warrior_info(::me::eax::examples::game::WarriorInfo* warrior_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_class_specific_info();
  if (warrior_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::me::eax::examples::game::WarriorInfo>::GetOwningArena(warrior_info);
    if (message_arena != submessage_arena) {
      warrior_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, warrior_info, submessage_arena);
    }
    set_has_warrior_info();
    class_specific_info_.warrior_info_ = warrior_info;
  }
  // @@protoc_insertion_point(field_set_allocated:me.eax.examples.game.Hero.warrior_info)
}
void Hero::set_allocated_mage_info(::me::eax::examples::game::MageInfo* mage_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_class_specific_info();
  if (mage_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::me::eax::examples::game::MageInfo>::GetOwningArena(mage_info);
    if (message_arena != submessage_arena) {
      mage_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mage_info, submessage_arena);
    }
    set_has_mage_info();
    class_specific_info_.mage_info_ = mage_info;
  }
  // @@protoc_insertion_point(field_set_allocated:me.eax.examples.game.Hero.mage_info)
}
Hero::Hero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:me.eax.examples.game.Hero)
}
Hero::Hero(const Hero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&hp_, &from.hp_,
    static_cast<size_t>(reinterpret_cast<char*>(&xp_) -
    reinterpret_cast<char*>(&hp_)) + sizeof(xp_));
  clear_has_class_specific_info();
  switch (from.class_specific_info_case()) {
    case kWarriorInfo: {
      _internal_mutable_warrior_info()->::me::eax::examples::game::WarriorInfo::MergeFrom(from._internal_warrior_info());
      break;
    }
    case kMageInfo: {
      _internal_mutable_mage_info()->::me::eax::examples::game::MageInfo::MergeFrom(from._internal_mage_info());
      break;
    }
    case CLASS_SPECIFIC_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:me.eax.examples.game.Hero)
}

inline void Hero::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&xp_) -
    reinterpret_cast<char*>(&hp_)) + sizeof(xp_));
clear_has_class_specific_info();
}

Hero::~Hero() {
  // @@protoc_insertion_point(destructor:me.eax.examples.game.Hero)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Hero::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_class_specific_info()) {
    clear_class_specific_info();
  }
}

void Hero::ArenaDtor(void* object) {
  Hero* _this = reinterpret_cast< Hero* >(object);
  (void)_this;
}
void Hero::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Hero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Hero::clear_class_specific_info() {
// @@protoc_insertion_point(one_of_clear_start:me.eax.examples.game.Hero)
  switch (class_specific_info_case()) {
    case kWarriorInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete class_specific_info_.warrior_info_;
      }
      break;
    }
    case kMageInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete class_specific_info_.mage_info_;
      }
      break;
    }
    case CLASS_SPECIFIC_INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CLASS_SPECIFIC_INFO_NOT_SET;
}


void Hero::Clear() {
// @@protoc_insertion_point(message_clear_start:me.eax.examples.game.Hero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&hp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xp_) -
      reinterpret_cast<char*>(&hp_)) + sizeof(xp_));
  clear_class_specific_info();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "me.eax.examples.game.Hero.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 xp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .me.eax.examples.game.WarriorInfo warrior_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_warrior_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .me.eax.examples.game.MageInfo mage_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mage_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hero::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:me.eax.examples.game.Hero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "me.eax.examples.game.Hero.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 hp = 2;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_hp(), target);
  }

  // int64 xp = 3;
  if (this->_internal_xp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_xp(), target);
  }

  // .me.eax.examples.game.WarriorInfo warrior_info = 4;
  if (_internal_has_warrior_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::warrior_info(this), target, stream);
  }

  // .me.eax.examples.game.MageInfo mage_info = 5;
  if (_internal_has_mage_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::mage_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:me.eax.examples.game.Hero)
  return target;
}

size_t Hero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:me.eax.examples.game.Hero)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 hp = 2;
  if (this->_internal_hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_hp());
  }

  // int64 xp = 3;
  if (this->_internal_xp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_xp());
  }

  switch (class_specific_info_case()) {
    // .me.eax.examples.game.WarriorInfo warrior_info = 4;
    case kWarriorInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *class_specific_info_.warrior_info_);
      break;
    }
    // .me.eax.examples.game.MageInfo mage_info = 5;
    case kMageInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *class_specific_info_.mage_info_);
      break;
    }
    case CLASS_SPECIFIC_INFO_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Hero::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Hero::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Hero::GetClassData() const { return &_class_data_; }

void Hero::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Hero *>(to)->MergeFrom(
      static_cast<const Hero &>(from));
}


void Hero::MergeFrom(const Hero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:me.eax.examples.game.Hero)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from._internal_xp() != 0) {
    _internal_set_xp(from._internal_xp());
  }
  switch (from.class_specific_info_case()) {
    case kWarriorInfo: {
      _internal_mutable_warrior_info()->::me::eax::examples::game::WarriorInfo::MergeFrom(from._internal_warrior_info());
      break;
    }
    case kMageInfo: {
      _internal_mutable_mage_info()->::me::eax::examples::game::MageInfo::MergeFrom(from._internal_mage_info());
      break;
    }
    case CLASS_SPECIFIC_INFO_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Hero::CopyFrom(const Hero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:me.eax.examples.game.Hero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hero::IsInitialized() const {
  return true;
}

void Hero::InternalSwap(Hero* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Hero, xp_)
      + sizeof(Hero::xp_)
      - PROTOBUF_FIELD_OFFSET(Hero, hp_)>(
          reinterpret_cast<char*>(&hp_),
          reinterpret_cast<char*>(&other->hp_));
  swap(class_specific_info_, other->class_specific_info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hero::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Game_2eproto_getter, &descriptor_table_Game_2eproto_once,
      file_level_metadata_Game_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace game
}  // namespace examples
}  // namespace eax
}  // namespace me
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::me::eax::examples::game::WarriorInfo* Arena::CreateMaybeMessage< ::me::eax::examples::game::WarriorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::me::eax::examples::game::WarriorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::me::eax::examples::game::MageInfo* Arena::CreateMaybeMessage< ::me::eax::examples::game::MageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::me::eax::examples::game::MageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::me::eax::examples::game::Hero* Arena::CreateMaybeMessage< ::me::eax::examples::game::Hero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::me::eax::examples::game::Hero >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
